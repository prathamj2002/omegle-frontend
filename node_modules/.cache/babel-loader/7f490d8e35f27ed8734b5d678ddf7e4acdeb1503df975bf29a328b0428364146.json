{"ast":null,"code":"var _jsxFileName = \"/Users/prathamlakhani/Desktop/Omegle-clone/frontend/src/components/Video.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport \"../styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5001\"); // Connect to backend server\n\nconst Video = () => {\n  _s();\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const peerConnection = useRef(null);\n  const [partnerId, setPartnerId] = useState(null);\n  useEffect(() => {\n    socket.on(\"match_found\", partner => {\n      setPartnerId(partner);\n      startCall(partner);\n    });\n    socket.on(\"offer\", async ({\n      sdp,\n      sender\n    }) => {\n      peerConnection.current = createPeerConnection(sender);\n      await peerConnection.current.setRemoteDescription(new RTCSessionDescription(sdp));\n      const answer = await peerConnection.current.createAnswer();\n      await peerConnection.current.setLocalDescription(answer);\n      socket.emit(\"answer\", {\n        sdp: answer,\n        target: sender\n      });\n    });\n    socket.on(\"answer\", async ({\n      sdp\n    }) => {\n      await peerConnection.current.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n    socket.on(\"ice-candidate\", ({\n      candidate\n    }) => {\n      var _peerConnection$curre;\n      (_peerConnection$curre = peerConnection.current) === null || _peerConnection$curre === void 0 ? void 0 : _peerConnection$curre.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    return () => {\n      socket.off(\"match_found\");\n      socket.off(\"offer\");\n      socket.off(\"answer\");\n      socket.off(\"ice-candidate\");\n    };\n  }, []);\n  const startCall = async partner => {\n    peerConnection.current = createPeerConnection(partner);\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    localVideoRef.current.srcObject = stream;\n    stream.getTracks().forEach(track => peerConnection.current.addTrack(track, stream));\n  };\n  const createPeerConnection = partner => {\n    const pc = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    });\n    pc.onicecandidate = event => {\n      if (event.candidate) {\n        socket.emit(\"ice-candidate\", {\n          candidate: event.candidate,\n          target: partner\n        });\n      }\n    };\n    pc.ontrack = event => {\n      remoteVideoRef.current.srcObject = event.streams[0];\n    };\n    return pc;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: localVideoRef,\n      autoPlay: true,\n      playsInline: true,\n      muted: true,\n      className: \"local-video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: remoteVideoRef,\n      autoPlay: true,\n      playsInline: true,\n      className: \"remote-video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(Video, \"nbdIzf4fRAEPJNF+hyKHJbzHq7s=\");\n_c = Video;\nexport default Video;\nvar _c;\n$RefreshReg$(_c, \"Video\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","jsxDEV","_jsxDEV","socket","Video","_s","localVideoRef","remoteVideoRef","peerConnection","partnerId","setPartnerId","on","partner","startCall","sdp","sender","current","createPeerConnection","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","emit","target","candidate","_peerConnection$curre","addIceCandidate","RTCIceCandidate","off","stream","navigator","mediaDevices","getUserMedia","video","audio","srcObject","getTracks","forEach","track","addTrack","pc","RTCPeerConnection","iceServers","urls","onicecandidate","event","ontrack","streams","className","children","ref","autoPlay","playsInline","muted","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/prathamlakhani/Desktop/Omegle-clone/frontend/src/components/Video.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport \"../styles.css\";\n\nconst socket = io(\"http://localhost:5001\"); // Connect to backend server\n\nconst Video = () => {\n    const localVideoRef = useRef(null);\n    const remoteVideoRef = useRef(null);\n    const peerConnection = useRef(null);\n    const [partnerId, setPartnerId] = useState(null);\n\n    useEffect(() => {\n        socket.on(\"match_found\", (partner) => {\n            setPartnerId(partner);\n            startCall(partner);\n        });\n\n        socket.on(\"offer\", async ({ sdp, sender }) => {\n            peerConnection.current = createPeerConnection(sender);\n            await peerConnection.current.setRemoteDescription(new RTCSessionDescription(sdp));\n            const answer = await peerConnection.current.createAnswer();\n            await peerConnection.current.setLocalDescription(answer);\n            socket.emit(\"answer\", { sdp: answer, target: sender });\n        });\n\n        socket.on(\"answer\", async ({ sdp }) => {\n            await peerConnection.current.setRemoteDescription(new RTCSessionDescription(sdp));\n        });\n\n        socket.on(\"ice-candidate\", ({ candidate }) => {\n            peerConnection.current?.addIceCandidate(new RTCIceCandidate(candidate));\n        });\n\n        return () => {\n            socket.off(\"match_found\");\n            socket.off(\"offer\");\n            socket.off(\"answer\");\n            socket.off(\"ice-candidate\");\n        };\n    }, []);\n\n    const startCall = async (partner) => {\n        peerConnection.current = createPeerConnection(partner);\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n        localVideoRef.current.srcObject = stream;\n        stream.getTracks().forEach(track => peerConnection.current.addTrack(track, stream));\n    };\n\n    const createPeerConnection = (partner) => {\n        const pc = new RTCPeerConnection({ iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }] });\n        pc.onicecandidate = (event) => {\n            if (event.candidate) {\n                socket.emit(\"ice-candidate\", { candidate: event.candidate, target: partner });\n            }\n        };\n        pc.ontrack = (event) => {\n            remoteVideoRef.current.srcObject = event.streams[0];\n        };\n        return pc;\n    };\n\n    return (\n        <div className=\"video-container\">\n            <video ref={localVideoRef} autoPlay playsInline muted className=\"local-video\" />\n            <video ref={remoteVideoRef} autoPlay playsInline className=\"remote-video\" />\n        </div>\n    );\n};\n\nexport default Video;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}